---
version: 0.2

branches:
  default:
    stage: pre-merge

models:
  - Git: &clone
      name: Pull repo
      repourl: '%(prop:git_reference)s'
      shallow: True
      retryFetch: True
      haltOnFailure: True
  - Workspace: &workspace
      type: kube_pod
      path: eve/workers/pod.yml
      images:
        aggressor:
          context: '.'
          dockerfile: eve/workers/unit_and_feature_tests/Dockerfile
        warp10:
          context: '.'
          dockerfile: 'images/warp10/Dockerfile'
        redis:
          context: '.'
          dockerfile: 'images/redis/Dockerfile'
  - Upload: &upload_artifacts
      source: /artifacts
      urls:
        - "*"
  - ShellCommand: &fetch_lfs
      name: fetch lfs files
      usePTY: True
      command: |
        git lfs pull
      haltOnFailure: True
  - ShellCommand: &wait_for_vault
      name: Wait for Vault
      command: |
        bash -c "
        set -ex
        bash tests/utils/wait_for_local_port.bash 8500 60"
      haltOnFailure: true
      logfiles:
        vault:
          filename: "/artifacts/vault.log"
          follow: true
  - ShellCommand: &wait_for_warp10
      name: Wait for Warp 10
      command: |
        bash -c "
        set -ex
        bash tests/utils/wait_for_local_port.bash 4802 60"
      haltOnFailure: true
      logfiles:
        warp10:
          filename: "/artifacts/warp10.log"
          follow: true

stages:
  pre-merge:
    worker:
      type: local
    steps:
    - ShellCommand:
        name: Pull LFS content on Master build
        command: |
          git lfs pull
        workdir: "%(prop:master_builddir)s/build"
    - TriggerStages:
        name: trigger all the tests
        stage_names:
        - linting-coverage
        - run-unit-tests
        - run-client-tests
        - run-server-tests
        - run-cron-tests
        - run-interval-tests
        - run-v2-functional-tests
        - run-v2-limit-tests
  linting-coverage:
    worker: *workspace
    steps:
      - Git: *clone
      - ShellCommand: *fetch_lfs
      - ShellCommand:
          name: run static analysis tools on markdown
          command: yarn run lint_md
      - ShellCommand:
          name: run static analysis tools on code
          command: yarn run lint
  run-unit-tests:
    worker: *workspace
    steps:
      - Git: *clone
      - ShellCommand:
          name: run unit tests
          command: yarn test
  run-client-tests:
    worker: *workspace
    steps:
      - Git: *clone
      - ShellCommand: *fetch_lfs
      - ShellCommand:
          name: run client tests
          command: bash ./eve/workers/unit_and_feature_tests/run_ft_tests.bash false ft_test:client
          logfiles:
            utapi:
              filename: "/artifacts/setup_ft_test:client.log"
              follow: true
  run-server-tests:
    worker: *workspace
    steps:
      - Git: *clone
      - ShellCommand: *fetch_lfs
      - ShellCommand:
          name: run server tests
          command: bash ./eve/workers/unit_and_feature_tests/run_ft_tests.bash false ft_test:server
          logfiles:
            utapi:
              filename: "/artifacts/setup_ft_test:server.log"
              follow: true
  run-cron-tests:
    worker: *workspace
    steps:
      - Git: *clone
      - ShellCommand: *fetch_lfs
      - ShellCommand:
          name: run cron tests
          command: bash ./eve/workers/unit_and_feature_tests/run_ft_tests.bash false ft_test:cron
          env:
            REINDEX_PYTHON_INTERPRETER: python3
          logfiles:
            utapi:
              filename: "/artifacts/setup_ft_test:cron.log"
              follow: true
  run-interval-tests:
    worker: *workspace
    steps:
      - Git: *clone
      - ShellCommand: *fetch_lfs
      - ShellCommand:
          name: run interval tests
          command: bash ./eve/workers/unit_and_feature_tests/run_ft_tests.bash true ft_test:interval
          logfiles:
            utapi:
              filename: "/artifacts/setup_ft_test:interval.log"
              follow: true
  run-v2-functional-tests:
    worker:
      << : *workspace
      vars:
        vault: enabled
    steps:
      - Git: *clone
      - ShellCommand: *fetch_lfs
      - ShellCommand: *wait_for_vault
      - ShellCommand: *wait_for_warp10
      - ShellCommand:
          name: run v2 functional tests
          command: bash ./eve/workers/unit_and_feature_tests/run_ft_tests.bash true ft_test:v2
          env:
            UTAPI_CACHE_BACKEND: redis
            UTAPI_LOG_LEVEL: trace
            SETUP_CMD: "run start_v2:server"
          logfiles:
            warp10:
              filename: "/artifacts/warp10.log"
              follow: true
            utapi:
              filename: "/artifacts/setup_ft_test:v2.log"
              follow: true
            vault:
              filename: "/artifacts/vault.log"
              follow: true
  run-v2-limit-tests:
    worker:
      << : *workspace
      vars:
        vault: enabled
    steps:
      - Git: *clone
      - ShellCommand: *fetch_lfs
      - ShellCommand: *wait_for_vault
      - ShellCommand: *wait_for_warp10
      - ShellCommand:
          name: run v2 soft limit tests
          command: bash ./eve/workers/unit_and_feature_tests/run_ft_tests.bash true ft_test:softLimit
          env:
            UTAPI_CACHE_BACKEND: redis
            UTAPI_LOG_LEVEL: trace
            SETUP_CMD: "run start_v2:server"
          logfiles:
            warp10:
              filename: "/artifacts/warp10.log"
              follow: true
            utapi:
              filename: "/artifacts/setup_ft_test:softLimit.log"
              follow: true
            vault:
              filename: "/artifacts/vault.log"
              follow: true
      - ShellCommand:
          name: run v2 hard limit tests
          command: bash ./eve/workers/unit_and_feature_tests/run_ft_tests.bash true ft_test:hardLimit
          env:
            UTAPI_CACHE_BACKEND: redis
            UTAPI_LOG_LEVEL: trace
            SETUP_CMD: "run start_v2:server"
          logfiles:
            warp10:
              filename: "/artifacts/warp10.log"
              follow: true
            utapi:
              filename: "/artifacts/setup_ft_test:hardLimit.log"
              follow: true
            vault:
              filename: "/artifacts/vault.log"
              follow: true
      - Upload: *upload_artifacts
