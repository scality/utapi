---
version: 0.2

branches:
  default:
    stage: pre-merge

models:
  - Git: &clone
      name: Pull repo
      repourl: '%(prop:git_reference)s'
      shallow: True
      retryFetch: True
      haltOnFailure: True
  - Workspace: &workspace
      type: kube_pod
      path: eve/workers/pod.yml
      images:
        aggressor:
          context: '.'
          dockerfile: eve/workers/unit_and_feature_tests/Dockerfile
        warp10:
          context: '.'
          dockerfile: 'images/warp10/Dockerfile'
        vault: eve/workers/mocks/vault
  - Upload: &upload_artifacts
      source: /artifacts
      urls:
        - "*"
  - env: &docker_env
      DEVELOPMENT_DOCKER_IMAGE_NAME: >-
        registry.scality.com/%(prop:git_slug)s-dev/%(prop:git_slug)s
      PRODUCTION_DOCKER_IMAGE_NAME: >-
        registry.scality.com/%(prop:git_slug)s/%(prop:git_slug)s
  - ShellCommand: &docker_login
      name: Login to docker registry
      command: >
        docker login
        -u "${HARBOR_LOGIN}"
        -p "${HARBOR_PASSWORD}"
        registry.scality.com
      usePTY: true
      env:
        HARBOR_LOGIN: '%(secret:harbor_login)s'
        HARBOR_PASSWORD: '%(secret:harbor_password)s'
  - ShellCommand: &wait_docker_daemon
      name: Wait for Docker daemon to be ready
      command: |
        bash -c '
        for i in {1..150}
        do
          docker info &> /dev/null && exit
          sleep 2
        done
        echo "Could not reach Docker daemon from buildbot worker" >&2
        exit 1'
      haltOnFailure: true


stages:
  pre-merge:
    worker:
      type: local
    steps:
    - TriggerStages:
        name: trigger all the tests
        stage_names:
        - docker-build
        - linting-coverage
        - run-unit-tests
        - run-client-tests
        - run-server-tests
        - run-cron-tests
        - run-interval-tests
        - run-v2-functional-tests
        - run-v2-limit-tests
  linting-coverage:
    worker: *workspace
    steps:
      - Git: *clone
      - ShellCommand:
          name: run static analysis tools on markdown
          command: yarn run lint_md
      - ShellCommand:
          name: run static analysis tools on code
          command: yarn run lint
  run-unit-tests:
    worker: *workspace
    steps:
      - Git: *clone
      - ShellCommand:
          name: run unit tests
          command: yarn test
  run-client-tests:
    worker: *workspace
    steps:
      - Git: *clone
      - ShellCommand:
          name: run client tests
          command: bash ./eve/workers/unit_and_feature_tests/run_ft_tests.bash false ft_test:client
          logfiles:
            utapi:
              filename: "/artifacts/setup_ft_test:client.log"
              follow: true
  run-server-tests:
    worker: *workspace
    steps:
      - Git: *clone
      - ShellCommand:
          name: run server tests
          command: bash ./eve/workers/unit_and_feature_tests/run_ft_tests.bash false ft_test:server
          logfiles:
            utapi:
              filename: "/artifacts/setup_ft_test:server.log"
              follow: true
  run-cron-tests:
    worker: *workspace
    steps:
      - Git: *clone
      - ShellCommand:
          name: run cron tests
          command: bash ./eve/workers/unit_and_feature_tests/run_ft_tests.bash false ft_test:cron
          logfiles:
            utapi:
              filename: "/artifacts/setup_ft_test:cron.log"
              follow: true
  run-interval-tests:
    worker: *workspace
    steps:
      - Git: *clone
      - ShellCommand:
          name: run interval tests
          command: bash ./eve/workers/unit_and_feature_tests/run_ft_tests.bash true ft_test:interval
          logfiles:
            utapi:
              filename: "/artifacts/setup_ft_test:interval.log"
              follow: true
  run-v2-functional-tests:
    worker:
      << : *workspace
      vars:
        vault: enabled
    steps:
      - Git: *clone
      - ShellCommand:
          name: Wait for Warp 10
          command: |
            bash -c "
            set -ex
            bash tests/utils/wait_for_local_port.bash 4802 60"
          logfiles:
            warp10:
              filename: "/artifacts/warp10.log"
              follow: true
      - ShellCommand:
          name: run v2 functional tests
          command: SETUP_CMD="run start_v2:server" bash ./eve/workers/unit_and_feature_tests/run_ft_tests.bash true ft_test:v2
          env:
            UTAPI_CACHE_BACKEND: redis
            UTAPI_LOG_LEVEL: trace
          logfiles:
            warp10:
              filename: "/artifacts/warp10.log"
              follow: true
            utapi:
              filename: "/artifacts/setup_ft_test:v2.log"
              follow: true
  run-v2-limit-tests:
    worker:
      << : *workspace
      vars:
        vault: enabled
    steps:
      - Git: *clone
      - ShellCommand:
          name: Wait for Warp 10
          command: |
            bash -c "
            set -ex
            bash tests/utils/wait_for_local_port.bash 4802 60"
          logfiles:
            warp10:
              filename: "/artifacts/warp10.log"
              follow: true
      - ShellCommand:
          name: run v2 functional tests
          command: SETUP_CMD="run start_v2:server" bash ./eve/workers/unit_and_feature_tests/run_ft_tests.bash true ft_test:softLimit
          env:
            UTAPI_CACHE_BACKEND: redis
            UTAPI_LOG_LEVEL: trace
          logfiles:
            warp10:
              filename: "/artifacts/warp10.log"
              follow: true
            utapi:
              filename: "/artifacts/setup_ft_test:softLimit.log"
      - ShellCommand:
          name: run v2 functional tests
          command: SETUP_CMD="run start_v2:server" bash ./eve/workers/unit_and_feature_tests/run_ft_tests.bash true ft_test:hardLimit
          env:
            UTAPI_CACHE_BACKEND: redis
            UTAPI_LOG_LEVEL: trace
          logfiles:
            warp10:
              filename: "/artifacts/warp10.log"
              follow: true
            utapi:
              filename: "/artifacts/setup_ft_test:hardLimit.log"
              follow: true
      - Upload: *upload_artifacts

  # The docker-build stage ensures that your images are built on every commit
  # and also hosted on the registry to help you pull it up and
  # test it in a real environment if needed.
  # It also allows us to pull and rename it when performing a release.
  docker-build:
    worker: &docker_worker
      type: kube_pod
      path: eve/workers/docker/pod.yaml
      images:
        worker: eve/workers/docker
    steps:
      - Git: *clone
      - ShellCommand: *wait_docker_daemon
      - ShellCommand: *docker_login
      - ShellCommand:
          name: docker build
          command: >-
            docker build .
            --tag=${DEVELOPMENT_DOCKER_IMAGE_NAME}:%(prop:commit_short_revision)s
          env: *docker_env
          haltOnFailure: true
      - ShellCommand:
          name: push docker image into the development namespace
          command: docker push ${DEVELOPMENT_DOCKER_IMAGE_NAME}
          haltOnFailure: true
          env: *docker_env

  # This stage can be used to release your Docker image.
  # To use this stage:
  # 1. Tag the repository
  # 2. Force a build using:
  #    * A branch that ideally matches the tag
  #    * The release stage
  #    * An extra property with the name tag and its value being the actual tag
  release:
    worker:
      type: local
    steps:
      - TriggerStages:
          stage_names:
            - docker-release
          haltOnFailure: true
  docker-release:
    worker: *docker_worker
    steps:
      - Git: *clone
      - ShellCommand: *wait_docker_daemon
      - ShellCommand: *docker_login
      - EvePropertyFromCommand:
          name: get tag short revision
          property: tag_revision
          command: |
            git checkout refs/tags/%(prop:tag)s 2&> /dev/null
            git rev-parse --short HEAD
          haltOnFailure: true
      - ShellCommand:
          name: publish docker image to Scality Production OCI registry
          command: |
            docker pull ${DEVELOPMENT_DOCKER_IMAGE_NAME}:%(prop:tag_revision)s
            docker tag ${DEVELOPMENT_DOCKER_IMAGE_NAME}:%(prop:tag_revision)s \
            ${PRODUCTION_DOCKER_IMAGE_NAME}:%(prop:tag)s
            docker push ${PRODUCTION_DOCKER_IMAGE_NAME}:%(prop:tag)s
          env: *docker_env
