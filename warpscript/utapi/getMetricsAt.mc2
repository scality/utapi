// @endpoint http://localhost:4802/api/v0/exec
{
  'name' 'utapi/getMetricsAt'
  'desc'
  <'

  '>
  'sig' [ [ [ 'a:MAP' 'o:MAP' ] [ 'm:LIST[GTS]'  ] ] ] // Signature
  'params' {
    // Signature params description
    'a' 'Map containing read/write tokens'
    'o' 'Map containing operation info'
    'm' 'Calculated metrics'
  }
  'examples' [
    <'

    '>
  ]
} 'info' STORE

<%
  !$info INFO
  SAVE 'context' STORE
  <%
    'getMetricsAt' SECTION

    JSON-> 'operation_info' STORE
    JSON-> 'auth_info' STORE

    $auth_info 'read' GET 'read_token' STORE

    $operation_info 'end' GET TOLONG 'endTimestamp' STORE
    $operation_info 'labels' GET 'labels' STORE
    $operation_info 'node' GET 'nodeID' STORE
    $operation_info 'no_reindex' GET true == 'no_reindex' STORE

    'utapi.checkpoint' 'checkpoint_class' STORE
    'utapi.snapshot' 'snapshot_class' STORE
    'utapi.repair.checkpoint' 'correction_class' STORE
    'utapi.repair.reindex' 'reindex_class' STORE

    {} 'snapshots' STORE

    {
      'objD' 0
      'sizeD' 0
      'inB' 0
      'outB' 0
      'ops' {}
    } 'results' STORE

    // Find all nodes containing snapshots
    'load_snapshots' SECTION

    // Define our macro to sum the snapshots and save their timestamp
    <%
      DUP 7 GET
      <%
        @utapi/decodeRecord
        $results @util/sumRecord
        'results' STORE
      %> FOREACH
      $snapshots SWAP
      DUP 0 GET DUP 'tick' STORE SWAP
      // Get the 3rd element from the list
      // Get the last element from resulting list
      // Get 'node' from resulting map
      2 GET DUP SIZE 1 - GET 'node' GET
      PUT DROP
      [ $tick NaN NaN NaN NULL ]
    %> 'sumSnapshot' STORE

    // Fetch the last snapshot for every node
    {
      'token' $read_token
      'class' $snapshot_class
      'labels' $labels UNMAP }
      'end' $endTimestamp
      'count' 1
    } FETCH

    // Apply our macro over the snapshots
    // Drop the result as we don't need it
    [
      SWAP
      [ 'node' ]
      $sumSnapshot MACROREDUCER
      true
    ] REDUCE
    DROP

    'load_checkpoints' SECTION

    {} 'checkpoints' STORE

    // 'snapshots: ' $snapshots ->JSON + LOGMSG
    // 'results: ' $results ->JSON + LOGMSG

    // Find all nodes containing checkpoints
    [
      $read_token
      $checkpoint_class
      $labels
    ] FINDSETS
    DROP SWAP DROP
    'node' GET
    <% DUP ISNULL %>
    <% DROP [] %> IFT

    [ SWAP // Push a mark onto the stack
    <%
      'key' STORE
      // Adds the `node` label to the map
      $labels UNMAP 'node' $key } 'filterLabels' STORE

      // Get the timestamp of the corresponding snapshot if it exists otherwise use 0
      $snapshots $key GET
      <% DUP TYPEOF 'LONG' != %>
      <% DROP -1 %> IFT
      'startTimestamp' STORE
      {
        'token' $read_token
        'class' $checkpoint_class
        'labels' $filterLabels
        'end' $endTimestamp
        'start' $startTimestamp 1 +
      } FETCH
    %> FOREACH

    ]
    FLATTEN

    <%
      DUP 7 GET
      <%
        @utapi/decodeRecord
        $results @util/sumRecord
        'results' STORE
      %> FOREACH
      [ SWAP 0 GET NaN NaN NaN NULL ]
    %> 'sumCheckpoint' STORE

    [
      SWAP
      [ 'node' ]
      $sumCheckpoint MACROREDUCER
      true
    ] REDUCE
    DROP

    // Find all nodes containing corrections
    'load_corrections' SECTION
    [
      $read_token
      $correction_class
      $labels
    ] FINDSETS
    DROP SWAP DROP
    'node' GET
    <% DUP ISNULL %>
    <% DROP [] %> IFT
    // Load corrections from each node
    <%
      'key' STORE
      // Adds the `node` label to the map
      $labels UNMAP 'node' $key } 'filterLabels' STORE

      -1 'correctionTimestamp' STORE

      // Get the timestamp of the corresponding snapshot if it exists otherwise use 0
      $snapshots $key GET
      <% DUP TYPEOF 'LONG' != %>
      <% DROP -1 %> IFT
      'startTimestamp' STORE
      {
        'token' $read_token
        'class' $correction_class
        'labels' $filterLabels
        'end' $endTimestamp
        'start' $startTimestamp 1 +
      } FETCH

      <% // Handle multiple GTS
        DUP LASTTICK
        <% DUP $correctionTimestamp > %>
        <% 'correctionTimestamp' STORE %>
        <% DROP %> IFTE

        VALUES
        <% // For each correction
          @utapi/decodeRecord
          // DUP 'Loaded correction ' SWAP ->JSON + LOGMSG
          $results @util/sumRecord 'results' STORE
        %> FOREACH
      %> FOREACH
    %> FOREACH

    'load_reindex' SECTION
    <% $no_reindex NOT %>
    <%
      // Only load the latest reindex for the current node
      $labels UNMAP 'node' $nodeID } 'filterLabels' STORE
      {
        'token' $read_token
        'class' $reindex_class
        'labels' $filterLabels
        'end' $endTimestamp
        'count' 1
      } FETCH
      // DUP 'Loaded reindex records ' SWAP ->JSON + LOGMSG
      <% // Handle multiple GTS
        VALUES
        <% // For each reindex correction
          @utapi/decodeRecord
          // DUP 'Loaded reindex correction ' SWAP ->JSON + LOGMSG
          $results @util/sumRecord 'results' STORE
        %> FOREACH
      %> FOREACH
    %> IFT

    $results // Leave results on the stack

  %>
  <% // catch any exception
    RETHROW
  %>
  <% // finally, restore the context
    $context RESTORE
  %> TRY
%>
'macro' STORE

$macro
