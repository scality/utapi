{
  'name' 'utapi/createSnapshot'
  'desc'
  <'
 Aggregates checkpoints and repairs to speed metric calculation
  '>
  'sig' [ [ [ 'a:MAP' 'o:MAP' ] [ 'c:LONG'  ] ] ] // Signature
  'params' {
    // Signature params description
    'a' 'Map containing read/write tokens'
    'o' 'Map containing operation info'
    'c' 'Number of create snapshots'
  }
  'examples' [
    <'

    '>
  ]
} 'info' STORE

<%
  !$info INFO
  SAVE 'context' STORE
  <%
    JSON-> 'operation_info' STORE
    JSON-> 'auth_info' STORE

    $auth_info 'write' GET 'write_token' STORE
    $auth_info 'read' GET 'read_token' STORE

    // Grab our passed nodeId, wrap in a map and store it as the variable `filterLabels`
    $operation_info 'nodeId' GET  'nodeId' STORE
    { 'node' $nodeId } 'filterLabels' STORE

    // Grab our passed timestamp and store it as the variable `endTimestamp`
    $operation_info 'end' GET TOLONG 'endTimestamp' STORE

    'utapi.snapshot.master' 'master_snapshot_class' STORE
    'utapi.snapshot' 'snapshot_class' STORE
    'utapi.checkpoint' 'checkpoint_class' STORE
    'utapi.repair.correction' 'correction_class' STORE

    // Fetch latest master snapshot
    $read_token $master_snapshot_class $filterLabels $endTimestamp @utapi/fetchFirstRecordBefore

    FIRSTTICK
    // If we found a snapshot, increment its timestamp so we start at the tick immediatly after
    <% DUP 0 > %>
    <%  1 + %> IFT
    'masterSnapshotTimestamp' STORE // Grab our ending timestamp from the last master snapshot (0 if no snapshots)

    [
      "node"
      ".app"
      ".producer"
      ".owner"
    ] ->SET 'ignoredLabels' STORE

    // Search for available snapshots
    [
      $read_token
      $snapshot_class
      $filterLabels
    ] FINDSETS
    DROP SWAP DROP // Keep only the label results
    // Extract unique labels
    DUP KEYLIST ->SET
    $ignoredLabels
    DIFFERENCE SET->
    SUBMAP 'availableSnapshots' STORE

    {} 'previousSnapshots' STORE

    $availableSnapshots KEYLIST
    <%
      'field' STORE

      {} 'fieldSnapshots' STORE
      // For each field create an empty map in previousSnapshots

      $availableSnapshots $field GET
      <%
        'value' STORE

        $read_token
        $snapshot_class
        {
          'node' $nodeId
          $field $value
        }
        $endTimestamp
        @utapi/fetchFirstRecordBefore
        VALUES 0 GET @utapi/decodeRecord 'record' STORE
        $fieldSnapshots $record $value PUT DROP
      %> FOREACH
      $previousSnapshots $fieldSnapshots $field PUT DROP
    %> FOREACH

    // Store a map for our created snapshots
    {} 'createdSnapshots' STORE

    // Fetch all corrections since last master snapshot til passed time
    {
      'token' $read_token
      'class' $correction_class
      'labels' $filterLabels
      'start' $masterSnapshotTimestamp
      'end' $endTimestamp
    } FETCH
    <%
      // Push our labels and and a list of label keys onto the stack
      DUP LABELS DUP KEYLIST
      // Filter the labels
      ->SET  $ignoredLabels DIFFERENCE SET->
      // Grab our label name
      0 GET 'labelName' STORE
      // Get our label value
      $labelName GET 'labelValue' STORE

      // Try to grab the previous snapshot
      $previousSnapshots $labelName $labelValue @util/getFromNested
      'created' STORE
      <% $created ISNULL %>
      <%
        {
          'objD' 0
          'sizeD' 0
          'inB' 0
          'outB' 0
          'ops' {}
        } 'created' STORE
      %> IFT

      VALUES
      <%
        @utapi/decodeRecord 'correction' STORE
        // 'Including correction ' $correction ->JSON + LOGMSG
        $created
        'objD' $correction 'objD' GET @util/sumField
        'sizeD' $correction 'sizeD' GET @util/sumField
        'inB' $correction 'inB' GET @util/sumField
        'outB'  $correction 'outB' GET @util/sumField

        'ops' GET 'createdOps' STORE
        $correction 'ops' GET 'correctionOps' STORE

        $createdOps // Push createdOps onto the stack for sumField
        $correctionOps KEYLIST
        <%
          'key' STORE
          $key $correctionOps $key GET @util/sumField
        %> FOREACH
        // Drop the remaining map returned by sumField from the stack
        DROP
      %> FOREACH

      $createdSnapshots $labelName GET 'labelSnapshots' STORE
      <% $labelSnapshots ISNULL %>
      <%
        {} 'labelSnapshots' STORE
        $createdSnapshots $labelSnapshots $labelName PUT DROP
      %> IFT
      $labelSnapshots $created $labelValue PUT DROP
    %> FOREACH

    // $createdSnapshots ->JSON LOGMSG

    // $endTimestamp TOSTRING LOGMSG
    // Fetch all checkpoints since last master snapshot til passed time
    {
      'token' $read_token
      'class' $checkpoint_class
      'labels' $filterLabels
      'start' $masterSnapshotTimestamp
      'end' $endTimestamp
    } FETCH
    <%
      // Push our labels and and a list of label keys onto the stack
      DUP LABELS DUP KEYLIST
      // Filter the labels
      ->SET  $ignoredLabels DIFFERENCE SET->
      // Grab our label name
      0 GET 'labelName' STORE
      // Get our label value
      $labelName GET 'labelValue' STORE

      // Check created snapshots in case any repairs were applied
      $createdSnapshots $labelName $labelValue @util/getFromNested
      'created' STORE
      <% $created ISNULL %>
      <%
        // If no new snapshot is found, try to grab the previous one
        $previousSnapshots $labelName $labelValue @util/getFromNested
        'created' STORE
        <% $created ISNULL %>
        <%
          // If no previous snapshot, use an empty record
          {
            'objD' 0
            'sizeD' 0
            'inB' 0
            'outB' 0
            'ops' {}
          } 'created' STORE
        %> IFT
      %> IFT

      VALUES
      <%
        @utapi/decodeRecord 'checkpoint' STORE
        $created
        'objD' $checkpoint 'objD' GET @util/sumField
        'sizeD' $checkpoint 'sizeD' GET @util/sumField
        'inB' $checkpoint 'inB' GET @util/sumField
        'outB'  $checkpoint 'outB' GET @util/sumField

        'ops' GET 'createdOps' STORE
        $checkpoint 'ops' GET 'checkpointOps' STORE

        $createdOps // Push createdOps onto the stack for sumField
        $checkpointOps KEYLIST
        <%
          'key' STORE
          $key $checkpointOps $key GET @util/sumField
        %> FOREACH
        // Drop the remaining map returned by sumField from the stack
        DROP
      %> FOREACH

      $createdSnapshots $labelName GET 'labelSnapshots' STORE
      <% $labelSnapshots ISNULL %>
      <%
        {} 'labelSnapshots' STORE
        $createdSnapshots $labelSnapshots $labelName PUT DROP
      %> IFT
      $labelSnapshots $created $labelValue PUT DROP
    %> FOREACH

    // $createdSnapshots ->JSON LOGMSG
    0 'snapshots' STORE
    // For each of our indexed fields
    $createdSnapshots KEYLIST
    <%
      'field' STORE
      $createdSnapshots $field GET 'fieldResults' STORE
      // For each unique value seen
      $fieldResults KEYLIST
      <%
        'fieldValue' STORE
        // Encode the results
        $fieldResults $fieldValue GET @utapi/encodeRecord 'value' STORE
        // 'Created new snapshot ' { 'node' $nodeId $field $fieldValue } ->JSON + ' ' + $value ->JSON + LOGMSG
        NEWGTS $snapshot_class RENAME
        $endTimestamp NaN NaN NaN $value ADDVALUE
        { 'node' $nodeId $field $fieldValue } RELABEL
        $write_token UPDATE
        $snapshots 1 + 'snapshots' STORE
      %> FOREACH
    %> FOREACH

  NEWGTS $master_snapshot_class RENAME
  $endTimestamp NaN NaN NaN 0 ADDVALUE
  { 'node' $nodeId } RELABEL
  $write_token UPDATE

  $snapshots // Leave the number of created snapshot on the stack

  %>
  <% // catch any exception
    RETHROW
  %>
  <% // finally, restore the context
    $context RESTORE
  %> TRY
%>
'macro' STORE

$macro
