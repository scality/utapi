---
name: tests

on:
  push:
    branches-ignore:
    - 'development/**'

jobs:
  build:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v2.3.4
        with:
          lfs: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1.6.0

      - name: Login to GitHub Registry
        uses: docker/login-action@v1.10.0
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to Scality Registry
        uses: docker/login-action@v1.10.0
        with:
          registry: registry.scality.com
          username: ${{ secrets.REGISTRY_LOGIN }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Build and push redis CI image
        uses: docker/build-push-action@v2.7.0
        with:
          push: true
          file: images/redis/Dockerfile
          context: '.'
          tags: ghcr.io/${{ github.repository }}/redis-ci:${{ github.sha }}
          cache-from: type=gha,scope=redis
          cache-to: type=gha,mode=max,scope=redis

      - name: Build and push redis replica CI image
        uses: docker/build-push-action@v2.7.0
        with:
          push: true
          context: .github/docker/redis-replica
          build-args: |
            REDIS_IMAGE=ghcr.io/${{ github.repository }}/redis-ci:${{ github.sha }}
          tags: ghcr.io/${{ github.repository }}/redis-replica-ci:${{ github.sha }}
          cache-from: type=gha,scope=redis-replica
          cache-to: type=gha,mode=max,scope=redis-replica

      - name: Build and push warp10 Image
        uses: docker/build-push-action@v2.7.0
        with:
          push: true
          file: images/warp10/Dockerfile
          context: '.'
          tags: ghcr.io/${{ github.repository }}/warp10-ci:${{ github.sha }}
          cache-from: type=gha,scope=warp10
          cache-to: type=gha,mode=max,scope=warp10

      - name: Build and push vault Image
        uses: docker/build-push-action@v2.7.0
        with:
          push: true
          context: '.github/docker/vault'
          tags: ghcr.io/${{ github.repository }}/vault-ci:${{ github.sha }}
          cache-from: type=gha,scope=vault
          cache-to: type=gha,mode=max,scope=vault

      - name: Build and push utapi Image
        uses: docker/build-push-action@v2.7.0
        with:
          push: true
          context: '.'
          tags: registry.scality.com/utapi-dev/utapi:${{ github.sha }}
          cache-from: type=gha,scope=utapi
          cache-to: type=gha,mode=max,scope=utapi


  lint:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        lfs: true
    - uses: actions/setup-node@v2
      with:
        node-version: '16.13.2'
        cache: yarn
    - name: install dependencies
      run: yarn install --frozen-lockfile --network-concurrency 1
    - name: run static analysis tools on markdown
      run: yarn run lint_md
    - name: run static analysis tools on code
      run: yarn run lint

  tests:
    needs: build
    runs-on: ubuntu-latest
    env:
      REINDEX_PYTHON_INTERPRETER: python3
    name: ${{ matrix.test.name }}
    strategy:
      fail-fast: false
      matrix:
        test:
        - name: run unit tests
          command: yarn test
          env: {}
        - name: run client tests
          command: bash ./.github/scripts/run_ft_tests.bash false ft_test:client
          env: {}
        - name: run server tests
          command: bash ./.github/scripts/run_ft_tests.bash false ft_test:server
          env: {}
        - name: run cron tests
          command: bash ./.github/scripts/run_ft_tests.bash false ft_test:cron
          env: {}
        - name: run interval tests
          command: bash ./.github/scripts/run_ft_tests.bash true ft_test:interval
          env: {}
    services:
      redis:
        image: ghcr.io/${{ github.repository }}/redis-ci:${{ github.sha }}
        ports:
        - 6379:6379
        - 9121:9121
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis-replica:
        image: ghcr.io/${{ github.repository }}/redis-replica-ci:${{ github.sha }}
        ports:
        - 6380:6380
        options: >-
          --health-cmd "redis-cli -p 6380 ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis-sentinel:
        image: bitnami/redis-sentinel:6.2
        env:
          REDIS_MASTER_SET: scality-s3
          REDIS_SENTINEL_PORT_NUMBER: '16379'
          REDIS_SENTINEL_QUORUM: '1'
        ports:
        - 16379:16379
        options: >-
          --health-cmd "redis-cli -p 16379 ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      warp10:
        image: ghcr.io/${{ github.repository }}/warp10-ci:${{ github.sha }}
        env:
          standalone.port: '4802'
          warpscript.maxops: '10000000'
          ENABLE_SENSISION: 't'
        options: >-
          --health-cmd "curl localhost:4802/api/v0/check"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10
          --health-start-period 60s
        ports:
        - 4802:4802
        - 8082:8082
        - 9718:9718

    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        lfs: true
    - uses: actions/setup-node@v2
      with:
        node-version: '16.13.2'
        cache: yarn
    - uses: actions/setup-python@v2
      with:
        python-version: '3.9'
    - uses: actions/cache@v2
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip
    - name: Install python deps
      run: |
        pip install requests
        pip install redis
    - name: install dependencies
      run: yarn install --frozen-lockfile --network-concurrency 1
    - name: ${{ matrix.test.name }}
      run: ${{ matrix.test.command }}
      env: ${{ matrix.test.env }}

  tests-with-vault:
    needs: build
    runs-on: ubuntu-latest
    env:
      REINDEX_PYTHON_INTERPRETER: python3
    name: ${{ matrix.test.name }}
    strategy:
      fail-fast: false
      matrix:
        test:
        - name: run v2 functional tests
          command: bash ./.github/scripts/run_ft_tests.bash true ft_test:v2
          env:
            UTAPI_CACHE_BACKEND: redis
            UTAPI_SERVICE_USER_ENABLED: 'true'
            UTAPI_LOG_LEVEL: trace
            SETUP_CMD: "run start_v2:server"
        - name: run v2 soft limit test
          command: bash ./.github/scripts/run_ft_tests.bash true ft_test:softLimit
          env:
            UTAPI_CACHE_BACKEND: redis
            UTAPI_LOG_LEVEL: trace
            SETUP_CMD: "run start_v2:server"
        - name: run v2 hard limit test
          command: bash ./.github/scripts/run_ft_tests.bash true ft_test:hardLimit
          env:
            UTAPI_CACHE_BACKEND: redis
            UTAPI_LOG_LEVEL: trace
            SETUP_CMD: "run start_v2:server"
    services:
      redis:
        image: ghcr.io/${{ github.repository }}/redis-ci:${{ github.sha }}
        ports:
        - 6379:6379
        - 9121:9121
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis-replica:
        image: ghcr.io/${{ github.repository }}/redis-replica-ci:${{ github.sha }}
        ports:
        - 6380:6380
        options: >-
          --health-cmd "redis-cli -p 6380 ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis-sentinel:
        image: bitnami/redis-sentinel:6.2
        env:
          REDIS_MASTER_SET: scality-s3
          REDIS_SENTINEL_PORT_NUMBER: '16379'
          REDIS_SENTINEL_QUORUM: '1'
        ports:
        - 16379:16379
        options: >-
          --health-cmd "redis-cli -p 16379 ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      warp10:
        image: ghcr.io/${{ github.repository }}/warp10-ci:${{ github.sha }}
        env:
          standalone.port: '4802'
          warpscript.maxops: '10000000'
          ENABLE_SENSISION: 't'
        ports:
        - 4802:4802
        - 8082:8082
        - 9718:9718
        options: >-
          --health-cmd "curl localhost:4802/api/v0/check"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10
          --health-start-period 60s
      vault:
        image: ghcr.io/${{ github.repository }}/vault-ci:${{ github.sha }}
        ports:
        - 8500:8500
        - 8600:8600
        - 8700:8700
        - 8800:8800
        options: >-
          --health-cmd "curl http://localhost:8500/_/healthcheck"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10

    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        lfs: true
    - uses: actions/setup-node@v2
      with:
        node-version: '16.13.2'
        cache: yarn
    - uses: actions/setup-python@v2
      with:
        python-version: '3.9'
    - uses: actions/cache@v2
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip
    - name: Install python deps
      run: |
        pip install requests
        pip install redis
    - name: install dependencies
      run: yarn install --frozen-lockfile --network-concurrency 1
    - name: Wait for warp10 a little bit
      run: sleep 60
    - name: ${{ matrix.test.name }}
      run: ${{ matrix.test.command }}
      env: ${{ matrix.test.env }}
    - name: Setup tmate session
      uses: mxschmitt/action-tmate@v3
      if: failure()
